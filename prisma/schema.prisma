generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type ProductsExtraDetail {
  FramedWithBordersAcrylicGlass String[]
  FramedWithoutBorders          String[]
  PaperTypeMatte                String[]
}

model Product {
  id          String              @id @default(auto()) @map("_id") @db.ObjectId
  Itemtype    String
  description String
  extraDetail ProductsExtraDetail
  id_         Int                 @map("id")
  image       String
  price       Int
  title       String
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  cart          CartItem[]
  orders        Order[]
  address       Address[]
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  productId String @db.ObjectId
  quantity  Int
  userId    String @db.ObjectId
  user      User   @relation(fields: [userId], references: [id])

  @@unique([productId, userId])
}

model Order {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  productId String      @db.ObjectId
  quantity  Int
  status    OrderStatus
  userId    String      @db.ObjectId
  user      User        @relation(fields: [userId], references: [id])
  createdAt DateTime    @default(now())

  @@unique([productId, userId])
}

enum OrderStatus {
  Delivered
  InProcess
}

model Address {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  userId      String? @db.ObjectId
  addressName String
  firstName   String
  lastName    String
  country     String
  state       String
  city        String
  zipCode     String
  email       String
  phoneNo     String
  User        User?   @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}
